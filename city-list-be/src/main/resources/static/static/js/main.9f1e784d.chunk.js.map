{"version":3,"sources":["services/city/constants.js","services/city/action-types.js","config/environment.js","services/http-call.js","services/city/api.js","services/city/actions.js","services/city/sagas.js","services/user/constants.js","services/user/action-types.js","services/user/actions.js","services/user/api.js","services/user/sagas.js","redux/sagas.js","services/city/selectors.js","services/city/reducer.js","services/user/selectors.js","services/user/reducer.js","redux/reducers.js","redux/root-reducer.js","serviceWorker.js","app/AppProvider.jsx","ui/components/common/DataTable.jsx","ui/components/city/CitiesTable.jsx","ui/components/common/SearchText.jsx","app/city/Cities.jsx","app/App.jsx","index.js","redux/create-store.js"],"names":["EMPTY_LIST","Object","freeze","LOAD_CITIES","UPDATE_CITY","SET_CITIES","i","getRequest","url","parseJSON","ignore401","options","call","fetch","deepmerge","credentials","redirect","headers","Accept","method","res","error","type","getResultFromResponse","postRequest","data","R","body","JSON","stringify","putRequest","endsWith","window","location","href","ok","errorData","Error","status","statusText","json","loadCities","updateCity","CITIES_ENDPOINT","envConfig","SEARCH_CITIES_ENDPOINT","name","page","size","id","photoUrl","actionTypes","payload","loadCitiesSaga","api","response","put","cities","updateCitySaga","all","takeLatest","LOAD_IS_EDIT_ROLE","SET_IS_EDIT_ROLE","setIsEditRole","loadIsEditRole","USER_ENDPOINT","loadIsEditRoleSaga","value","allSagas","rootSaga","sagasMiddleware","createSagaMiddleware","history","onError","citySagas","userSagas","console","middleware","start","run","getCities","initialState","state","assocPath","getIsEditRole","path","cityReducer","userReducer","connectRouter","rootReducer","appReducer","combineReducers","reducers","action","Boolean","hostname","match","AppProvider","store","children","DataTable","props","React","useMemo","columns","useTable","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageIndex","pageSize","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","className","onClick","disabled","length","defaultValue","onChange","e","target","Number","style","width","key","totalLoadedRows","totalExistingRows","loadMore","loadAll","ImageCell","element","isEditRole","useState","elementUrl","setElementUrl","dispatch","useDispatch","useEffect","el","newValue","original","src","alt","EditableTextCell","elementName","setElementName","Header","accessor","Cell","CitiesTable","citiesContent","totalElements","numberOfElements","content","SearchText","setValue","Cities","loadedCities","useSelector","searchValue","setSearchValue","loadingAmountSize","setLoadingAmountSize","App","___INITIAL_STATE__","createBrowserHistory","onSagasError","composeEnhancers","compose","routerMiddleware","sagas","createStore","applyMiddleware","asyncReducers","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f1e784d.chunk.js","sourcesContent":["export const SERVICE = 'CITY'\r\n\r\nexport const DOMAIN = 'city'\r\n\r\nexport const KEY_LOADED_CITIES = 'cities'\r\n\r\nexport const EMPTY_LIST = Object.freeze([])\r\n","import {SERVICE} from './constants'\r\n\r\nexport const LOAD_CITIES = `${SERVICE}/LOAD_CITIES`\r\nexport const UPDATE_CITY = `${SERVICE}/UPDATE_CITY`\r\nexport const SET_CITIES = `${SERVICE}/SET_CITIES`\r\n","export default {\r\n    backendUrl: \"http://localhost:8080\"\r\n}","import * as deepmerge from 'deepmerge'\r\nimport {call} from 'redux-saga/effects'\r\nimport * as R from 'ramda'\r\n\r\nconst getDefaultOptions = () => ({\r\n    credentials: 'include',\r\n    redirect: 'follow',\r\n    headers: {\r\n        Accept: 'application/json',\r\n    },\r\n})\r\n\r\nexport function* getRequest(\r\n    url,\r\n    {parseJSON = false, ignore401 = false, ...options} = {},\r\n) {\r\n    let res\r\n\r\n    try {\r\n        res = yield call(\r\n            fetch,\r\n            url,\r\n            deepmerge.all([getDefaultOptions(), {method: 'GET'}, options]),\r\n        )\r\n    } catch (error) {\r\n        return {\r\n            error,\r\n            type: 'network',\r\n        }\r\n    }\r\n\r\n    return yield call(getResultFromResponse, res, 'GET', {parseJSON, ignore401})\r\n}\r\n\r\nexport function* postRequest(\r\n    url,\r\n    data,\r\n    {parseJSON = false, ignore401 = false, ...options} = {},\r\n) {\r\n    let res\r\n\r\n    try {\r\n        res = yield call(\r\n            fetch,\r\n            url,\r\n            deepmerge.all([\r\n                getDefaultOptions(),\r\n                {\r\n                    method: 'POST',\r\n                    ...(!R.isNil(data)\r\n                        ? {\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(data),\r\n                        }\r\n                        : {}),\r\n                },\r\n                options,\r\n            ]),\r\n        )\r\n    } catch (error) {\r\n        return {\r\n            error,\r\n            type: 'network',\r\n        }\r\n    }\r\n\r\n    return yield call(getResultFromResponse, res, 'POST', {\r\n        parseJSON,\r\n        ignore401,\r\n    })\r\n}\r\n\r\nexport function* postFormRequest(\r\n    url,\r\n    data,\r\n    {parseJSON = false, ignore401 = false, ...options} = {},\r\n) {\r\n\r\n    const formData = new FormData()\r\n\r\n    for (const [k, v] of Object.entries(data)) {\r\n        formData.set(k, v)\r\n    }\r\n\r\n    let res\r\n\r\n    try {\r\n        res = yield call(fetch, url, {\r\n            body: formData,\r\n            ...deepmerge.all([getDefaultOptions(), {method: 'POST'}, options]),\r\n        })\r\n    } catch (error) {\r\n        return {\r\n            error,\r\n            type: 'network',\r\n        }\r\n    }\r\n\r\n    return yield call(getResultFromResponse, res, 'POST', {\r\n        parseJSON,\r\n        ignore401,\r\n    })\r\n}\r\n\r\nexport function* putRequest(\r\n    url,\r\n    data,\r\n    {parseJSON = false, ignore401 = false, ...options} = {},\r\n) {\r\n    let res\r\n\r\n    try {\r\n        res = yield call(\r\n            fetch,\r\n            url,\r\n            deepmerge.all([\r\n                getDefaultOptions(),\r\n                {\r\n                    method: 'PUT',\r\n                    ...(!R.isNil(data)\r\n                        ? {\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(data),\r\n                        }\r\n                        : {}),\r\n                },\r\n                options,\r\n            ]),\r\n        )\r\n    } catch (error) {\r\n        return {\r\n            error,\r\n            type: 'network',\r\n        }\r\n    }\r\n\r\n    return yield call(getResultFromResponse, res, 'PUT', {parseJSON, ignore401})\r\n}\r\n\r\nexport function* patchRequest(\r\n    url,\r\n    data,\r\n    {parseJSON = false, ignore401 = false, ...options} = {},\r\n) {\r\n    let res\r\n\r\n    try {\r\n        res = yield call(\r\n            fetch,\r\n            url,\r\n            deepmerge.all([\r\n                getDefaultOptions(),\r\n                {\r\n                    method: 'PATCH',\r\n                    ...(!R.isNil(data)\r\n                        ? {\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(data),\r\n                        }\r\n                        : {}),\r\n                },\r\n                options,\r\n            ]),\r\n        )\r\n    } catch (error) {\r\n        return {\r\n            error,\r\n            type: 'network',\r\n        }\r\n    }\r\n\r\n    return yield call(getResultFromResponse, res, 'PATCH', {\r\n        parseJSON,\r\n        ignore401,\r\n    })\r\n}\r\n\r\nexport function* deleteRequest(\r\n    url,\r\n    data,\r\n    {parseJSON = false, ignore401 = false, ...options} = {},\r\n) {\r\n    let res\r\n\r\n    try {\r\n        res = yield call(\r\n            fetch,\r\n            url,\r\n            deepmerge.all([\r\n                getDefaultOptions(),\r\n                {\r\n                    method: 'DELETE',\r\n                    ...(!R.isNil(data)\r\n                        ? {\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(data),\r\n                        }\r\n                        : {}),\r\n                },\r\n                options,\r\n            ]),\r\n        )\r\n    } catch (error) {\r\n        return {\r\n            error,\r\n            type: 'network',\r\n        }\r\n    }\r\n\r\n    return yield call(getResultFromResponse, res, 'DELETE', {\r\n        parseJSON,\r\n        ignore401,\r\n    })\r\n}\r\n\r\nfunction* getResultFromResponse(\r\n    res,\r\n    method,\r\n    {parseJSON = false, ignore401 = false} = {},\r\n) {\r\n    if (res.url.endsWith('/login')) {\r\n        window.location.href = res.url\r\n    }\r\n    if (!res.ok) {\r\n\r\n        let errorData\r\n\r\n        // Try parsing error JSON\r\n        try {\r\n            errorData = yield call([res, 'json'])\r\n        } catch (err) {\r\n            // If not ok response, just return empty `errorData` later\r\n        }\r\n\r\n        return {\r\n            error: new Error(`Status: ${res.status} - ${res.statusText}`),\r\n            type: 'status',\r\n            status: res.status,\r\n            statusText: res.statusText,\r\n            errorData\r\n        }\r\n    }\r\n\r\n    let json\r\n\r\n    if (parseJSON) {\r\n        // Try parsing JSON\r\n        try {\r\n            json = yield call([res, 'json'])\r\n        } catch (err) {\r\n            // If ok response, needs JSON, but returns no data: error out\r\n            throw new Error('Could not parse JSON from response')\r\n        }\r\n    }\r\n\r\n    return {\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        data: json,\r\n    }\r\n}\r\n","import {call} from 'redux-saga/effects'\r\nimport envConfig from '../../config/environment'\r\nimport {postRequest, putRequest} from '../http-call'\r\n\r\nconst CITIES_ENDPOINT = `${envConfig.backendUrl}/city`\r\nconst SEARCH_CITIES_ENDPOINT = `${CITIES_ENDPOINT}/search`\r\n\r\n\r\nexport function* loadCities(name, page, size) {\r\n    return yield call(\r\n        postRequest,\r\n        `${SEARCH_CITIES_ENDPOINT}?page=${page}&size=${size}&sort=name`,\r\n        {\r\n            name\r\n        },\r\n        {parseJSON: true},\r\n    )\r\n}\r\n\r\nexport function* updateCity(id, name, photoUrl) {\r\n    return yield call(\r\n        putRequest,\r\n        CITIES_ENDPOINT,\r\n        {\r\n            id,\r\n            name,\r\n            photoUrl\r\n        },\r\n        {parseJSON: true},\r\n    )\r\n}\r\n","import * as actionTypes from './action-types'\r\n\r\nexport const loadCities = (name, page, size) => ({\r\n    type: actionTypes.LOAD_CITIES,\r\n    payload: {name, page, size},\r\n})\r\n\r\nexport const setCities = cities => ({\r\n    type: actionTypes.SET_CITIES,\r\n    payload: {cities},\r\n})\r\n\r\nexport const updateCity = (id, name, photoUrl) => ({\r\n    type: actionTypes.UPDATE_CITY,\r\n    payload: {id, name, photoUrl},\r\n})","import {all, call, put, takeLatest} from 'redux-saga/effects'\r\nimport * as actionTypes from './action-types'\r\nimport * as api from \"./api\";\r\nimport {setCities} from \"./actions\";\r\n\r\n\r\nfunction* loadCitiesSaga({payload: {name, page, size}}) {\r\n    const response = yield call(api.loadCities, name, page, size)\r\n    if (response.error) {\r\n        return\r\n    }\r\n    yield put(\r\n        setCities(response.data)\r\n    )\r\n}\r\n\r\nfunction* updateCitySaga({payload: {id, name, photoUrl}}) {\r\n    yield call(api.updateCity, id, name, photoUrl)\r\n}\r\n\r\nexport default function* () {\r\n    yield all([\r\n        takeLatest(actionTypes.UPDATE_CITY, updateCitySaga),\r\n        takeLatest(actionTypes.LOAD_CITIES, loadCitiesSaga)\r\n    ])\r\n}\r\n","export const SERVICE = 'USER'\r\n\r\nexport const DOMAIN = 'user'\r\n\r\nexport const KEY_IS_EDIT_ROLE = 'isEditRole'","import {SERVICE} from './constants'\r\n\r\nexport const LOAD_IS_EDIT_ROLE = `${SERVICE}/GET_IS_EDIT_ROLE`\r\nexport const SET_IS_EDIT_ROLE = `${SERVICE}/SET_IS_EDIT_ROLE`\r\n","import * as actionTypes from './action-types'\r\n\r\nexport const loadIsEditRole = () => ({\r\n    type: actionTypes.LOAD_IS_EDIT_ROLE,\r\n})\r\n\r\nexport const setIsEditRole = (response) => ({\r\n    type: actionTypes.SET_IS_EDIT_ROLE,\r\n    payload: response\r\n})\r\n","import {call} from 'redux-saga/effects'\r\nimport envConfig from '../../config/environment'\r\nimport {getRequest} from '../http-call'\r\n\r\nconst USER_ENDPOINT = `${envConfig.backendUrl}/user`\r\n\r\n\r\nexport function* loadIsEditRole() {\r\n    return yield call(\r\n        getRequest,\r\n        `${USER_ENDPOINT}/isEditAllowed`,\r\n        {parseJSON: true},\r\n    )\r\n}\r\n","import * as actionTypes from './action-types'\r\nimport {all, call, put, takeLatest} from 'redux-saga/effects'\r\nimport {setIsEditRole} from './actions'\r\nimport * as api from './api'\r\n\r\nfunction* loadIsEditRoleSaga() {\r\n    const response = yield call(api.loadIsEditRole)\r\n\r\n    if (response.error) {\r\n        return\r\n    }\r\n    yield put(\r\n        setIsEditRole(response.data.value)\r\n    )\r\n}\r\n\r\nexport default function* () {\r\n    yield all([\r\n        takeLatest(actionTypes.LOAD_IS_EDIT_ROLE, loadIsEditRoleSaga)\r\n    ])\r\n}","import createSagaMiddleware from 'redux-saga'\r\nimport {all, call} from 'redux-saga/effects'\r\nimport citySagas from 'services/city/sagas'\r\nimport userSagas from 'services/user/sagas'\r\n\r\nconst sagasMiddleware = createSagaMiddleware()\r\n\r\nfunction* allSagas(history, onError) {\r\n    try {\r\n        yield all([citySagas(), userSagas()])\r\n    } catch (e) {\r\n        console.error(e)\r\n        if (onError) onError(e)\r\n    }\r\n}\r\n\r\nfunction* rootSaga(history, onError) {\r\n    while (true) {\r\n        try {\r\n            yield call(allSagas, history, onError)\r\n        } catch (e) {\r\n            console.error(e)\r\n            onError(e)\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    middleware: sagasMiddleware,\r\n    start: (history, onError) => sagasMiddleware.run(rootSaga, history, onError),\r\n}\r\n","import {DOMAIN, EMPTY_LIST, KEY_LOADED_CITIES} from \"./constants\";\r\nimport * as R from \"ramda\";\r\n\r\nexport const getCities = R.pathOr(EMPTY_LIST, [DOMAIN, KEY_LOADED_CITIES])\r\n","import {assocPath} from 'ramda'\r\nimport * as actionTypes from './action-types'\r\nimport {KEY_LOADED_CITIES} from \"./constants\";\r\n\r\nconst initialState = {}\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case actionTypes.SET_CITIES:\r\n            return assocPath([KEY_LOADED_CITIES], payload.cities, state)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {path} from 'ramda'\r\n\r\nimport {DOMAIN, KEY_IS_EDIT_ROLE} from './constants'\r\n\r\n\r\nexport const getIsEditRole = state => path([DOMAIN, KEY_IS_EDIT_ROLE], state)\r\n","import * as actionTypes from './action-types'\r\nimport {assocPath} from \"ramda\";\r\nimport {KEY_IS_EDIT_ROLE} from \"./constants\";\r\n\r\nconst initialState = {}\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case actionTypes.SET_IS_EDIT_ROLE:\r\n            return assocPath([KEY_IS_EDIT_ROLE], payload, state)\r\n        default:\r\n            return state\r\n    }\r\n}","import {connectRouter} from 'connected-react-router'\r\nimport {DOMAIN as CITY_DOMAIN, reducer as cityReducer,} from 'services/city'\r\nimport {DOMAIN as USER_DOMAIN, reducer as userReducer,} from 'services/user'\r\n\r\nexport default history => ({\r\n    [CITY_DOMAIN]: cityReducer,\r\n    [USER_DOMAIN]: userReducer,\r\n    router: connectRouter(history),\r\n})\r\n","import {combineReducers} from 'redux'\r\nimport reducers from './reducers'\r\n\r\nconst rootReducer = (initialState = {}, history = {}) => {\r\n    const appReducer = combineReducers(reducers(history))\r\n\r\n    return (state, action) => appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Provider as ReduxProvider} from 'react-redux'\r\nimport {ConnectedRouter} from 'connected-react-router'\r\n\r\nconst AppProvider = ({store, history, children}) => (\r\n    <ReduxProvider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            {children}\r\n        </ConnectedRouter>\r\n    </ReduxProvider>\r\n)\r\n\r\nAppProvider.propTypes = {\r\n    store: PropTypes.object.isRequired,\r\n    history: PropTypes.object.isRequired,\r\n    children: PropTypes.node,\r\n}\r\n\r\nexport default AppProvider\r\n","import React from \"react\";\r\nimport {usePagination, useTable} from \"react-table\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport BTable from 'react-bootstrap/Table';\r\n\r\nconst DataTable = (props) => {\r\n    const data = React.useMemo(() => props.data, [props.data]);\r\n    const columns = React.useMemo(() => props.columns, [props.columns]);\r\n    const initialState = React.useMemo(() => props.initialState);\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: {pageIndex, pageSize}\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            initialState\r\n        },\r\n        usePagination\r\n    );\r\n    //change\r\n    return (\r\n        <>\r\n            <BTable {...getTableProps()}>\r\n                <thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                {page.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </BTable>\r\n            <div className=\"pagination\">\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                    {\"<<\"}\r\n                </button>\r\n                {\" \"}\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                    {\"<\"}\r\n                </button>\r\n                {\" \"}\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                    {\">\"}\r\n                </button>\r\n                {\" \"}\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                    {\">>\"}\r\n                </button>\r\n                {\" \"}\r\n                <span>\r\n          Page{\" \"}\r\n                    <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{\" \"}\r\n        </span>\r\n                <span>\r\n          | Go to page:{\" \"}\r\n                    <input\r\n                        type=\"number\"\r\n                        defaultValue={pageIndex + 1}\r\n                        onChange={(e) => {\r\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                            gotoPage(page);\r\n                        }}\r\n                        style={{width: \"100px\"}}\r\n                    />\r\n        </span>{\" \"}\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        setPageSize(Number(e.target.value));\r\n                    }}\r\n                >\r\n                    {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                        <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n\r\n                <div>{`Loaded ${props.totalLoadedRows} out of ${props.totalExistingRows}`}</div>\r\n                <button onClick={() => props.loadMore()}>\r\n                    {\"Load more\"}\r\n                </button>\r\n                <button onClick={() => props.loadAll()}>\r\n                    {\"Load all\"}\r\n                </button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DataTable;","import React, {useEffect, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport DataTable from \"../common/DataTable\";\r\nimport './CitiesTable.scss'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateCity} from \"../../../services/city\";\r\n\r\nfunction ImageCell(element, isEditRole) {\r\n    const [elementUrl, setElementUrl] = useState(element.value);\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        setElementUrl(element.value)\r\n    }, [element.value])\r\n    const updateCityFunc = (newValue) => {\r\n        setElementUrl(newValue)\r\n        dispatch(updateCity(element.cell.row.original.id, null, newValue))\r\n    }\r\n    return <div>\r\n        {isEditRole && <input className=\"form-text form-control\" value={elementUrl}\r\n                              onChange={(el) => updateCityFunc(el.target.value)}/>}\r\n        <img src={elementUrl} alt=\"City\"/>\r\n    </div>\r\n}\r\n\r\nfunction EditableTextCell(element, isEditRole) {\r\n    const [elementName, setElementName] = useState(element.value);\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        setElementName(element.value)\r\n    }, [element.value])\r\n    const updateCityFunc = (newValue) => {\r\n        setElementName(newValue)\r\n        dispatch(updateCity(element.cell.row.original.id, newValue, null))\r\n    }\r\n    return <div className=\"form-group cities-editable-input\">\r\n        {isEditRole ? <input className=\"form-text form-control\" value={elementName}\r\n                             onChange={(el) => updateCityFunc(el.target.value)}/>\r\n            : <div>{elementName}</div>}\r\n    </div>\r\n}\r\n\r\nconst columns = (isEditRole) => [\r\n    {\r\n        Header: \"Id\",\r\n        accessor: \"id\"\r\n    },\r\n    {\r\n        Header: \"Name\",\r\n        accessor: \"name\",\r\n        Cell: (element) => EditableTextCell(element, isEditRole)\r\n    },\r\n    {\r\n        Header: \"Photo\",\r\n        accessor: \"photoUrl\",\r\n        Cell: (element) => ImageCell(element, isEditRole)\r\n    },\r\n];\r\n\r\nconst initialState = {\r\n    pageSize: 10,\r\n    pageIndex: 0\r\n};\r\n\r\nconst CitiesTable = ({citiesContent, loadMore, loadAll, isEditRole}) => {\r\n    const totalExistingRows = citiesContent.totalElements\r\n    const totalLoadedRows = citiesContent.numberOfElements\r\n    return (\r\n        <DataTable\r\n            data={citiesContent.content}\r\n            columns={columns(isEditRole)}\r\n            initialState={initialState}\r\n            loadMore={loadMore}\r\n            loadAll={loadAll}\r\n            totalLoadedRows={totalLoadedRows}\r\n            totalExistingRows={totalExistingRows}\r\n        />\r\n    )\r\n}\r\n\r\nCitiesTable.propTypes = {\r\n    text: PropTypes.string\r\n}\r\n\r\nexport default CitiesTable","import React from 'react'\r\nimport './SearchText.scss'\r\n\r\nfunction SearchText({value, setValue}) {\r\n    return (\r\n        <div className=\"form-group search-input\">\r\n            <label className=\"label\">SEARCH: </label>\r\n            <input className=\"form-control form-control-lg\" type=\"text\" value={value}\r\n                   onChange={(el) => setValue(el.target.value)}/>\r\n            <button className=\"btn-primary\" onClick={() => window.location.href = '/logout'}>Logout</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchText;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCities, loadCities} from \"../../services/city\";\r\nimport CitiesTable from \"../../ui/components/city/CitiesTable\";\r\nimport SearchText from \"../../ui/components/common/SearchText\";\r\nimport {getIsEditRole, loadIsEditRole} from \"../../services/user\";\r\n\r\nconst INITIAL_LOADING_ROW_SIZE = 100\r\n\r\nfunction Cities() {\r\n    const dispatch = useDispatch()\r\n    const loadedCities = useSelector(getCities)\r\n    const isEditRole = useSelector(getIsEditRole)\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n    const [loadingAmountSize, setLoadingAmountSize] = useState(INITIAL_LOADING_ROW_SIZE)\r\n    useEffect(() => {\r\n        dispatch(loadIsEditRole())\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        dispatch(loadCities(searchValue, 0, loadingAmountSize))\r\n    }, [dispatch, searchValue, loadingAmountSize])\r\n    if (!loadedCities.content) {\r\n        return <div>Loading</div>\r\n    }\r\n    return (\r\n        <div className=\"container-fluid container-md\">\r\n            <SearchText value={searchValue} setValue={setSearchValue}/>\r\n            <CitiesTable\r\n                isEditRole={isEditRole}\r\n                citiesContent={loadedCities}\r\n                loadMore={() => setLoadingAmountSize(loadingAmountSize + INITIAL_LOADING_ROW_SIZE)}\r\n                loadAll={() => setLoadingAmountSize(loadedCities.totalElements)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cities;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Cities from \"./city/Cities\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Cities/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {createBrowserHistory} from 'history'\r\nimport createStore from './redux/create-store'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport AppProvider from './app/AppProvider'\r\nimport App from './app/App'\r\n\r\nimport './assets/stylesheets/style.scss'\r\n\r\nconst initialState = window.___INITIAL_STATE__\r\nconst history = createBrowserHistory()\r\nconst store = createStore(initialState, history)\r\n\r\nReactDOM.render(\r\n    <AppProvider store={store} history={history}>\r\n        <App/>\r\n    </AppProvider>,\r\n    document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport {routerMiddleware} from 'connected-react-router'\r\nimport sagas from './sagas'\r\nimport rootReducer from './root-reducer'\r\n\r\nconst MAX_INSPECTOR_ACTIONS = 100\r\n\r\nexport default (initialState = {}, history = {}, onSagasError = {}) => {\r\n    // redux extension\r\n\r\n    const composeEnhancers =\r\n        process.env.NODE_ENV !== 'production' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n                maxAge: MAX_INSPECTOR_ACTIONS,\r\n            })\r\n            : compose\r\n\r\n    // midleware\r\n\r\n    const middleware = [routerMiddleware(history), sagas.middleware]\r\n\r\n    // create store\r\n\r\n    const store = createStore(\r\n        rootReducer(initialState, history),\r\n        initialState,\r\n        composeEnhancers(applyMiddleware(...middleware)),\r\n    )\r\n\r\n    store.asyncReducers = {}\r\n\r\n    // sagas\r\n\r\n    sagas.start(onSagasError)\r\n\r\n    return store\r\n}\r\n"],"sourceRoot":""}